---
title: Ecoviability
author: RF
editor_options: 
  chunk_output_type: console
---

```{r, echo = F, message=FALSE, }
# the cpp part of the surplus model was turned into a R package for parallel work
# remotes::install_github("baldrech/RcppSimEffort")

library(ggplot2)
library(dplyr)
library(tidyr)
library(RcppSimEffort)
source("equations.R")
source("simLoop.R")
groups <- 'BareCode_MSPM_new/data/Main_metier_Ratpack_clean_FishBase.csv'
P.prey <- 'BareCode_MSPM_new/data/Pprey_Ratpack_Atlantis.csv'
E.Fleet <- 'BareCode_MSPM_new/data/Effort_metier_Ratpack.csv'

a <- get(load("res/Output.RData"))
estimation.MSP <- output_NR$out

qflt   <- estimation.MSP$q
currentF <- as.numeric(read.csv(E.Fleet)[34,-1])

knitr::opts_chunk$set(eval = FALSE)
```



The SESSH is a fisheries composed of 14 metiers and targets 9 species

```{r, eval = T, echo = F}
component_df <- data.frame("Metier" = c("FLTDanishSeiene102030", "FLTDanishSeiene60", "FLTTrawl10",
                           "FLTTrawl2060", "FLTTrawl30", "HK_LIG", "Mixed", "MWOTrawl102060", 
                           "MWOTrawl30", "TrawlLIG", "TrawlRED", "WHSDanishSeine20", 
                           "WHSDanishSeine60", "WHSTrawl1020"),
                           "Species" = c("FLT", "GRE", "LIG", "MOW", "RED", "SQD", "TRS", "TRT",
                                         "WHS", rep(NA,5)))
  
#knitr::kable(component_df, caption = "components")


qflt_color <- ceiling(qflt)
plot_dat <- reshape2::melt(qflt_color)
plot_dat$value <- as.factor(plot_dat$value)
colnames(plot_dat) <- c("Metier","Species","Fished")

ggplot(plot_dat) +
  geom_tile(aes(y = Metier, x = Species, fill = Fished))

```



The eco-viability of such multispecies / multi gear fisheries can be divided into three components:

- ecological viability: threshold where the SSB should not fall below

- economic viability: threshold where fishing companies should be able to make sufficient profits to cover all their costs 

- social viability: threshold wage to keep fishing crews active


The objective here is to find a combination of metier effort allowing all three threshold to be reached simultaneously.

To do so, the Surplus Model is run over an array of effort combination.
These effort combination scales up or down the latest effort values from ABARES and allows to do multiple projection in time of possible future efforts.
The model outputs biomass per species at equilibrium which is used to calculate the three thresholds. 

# Ecoviability

## Biomass threshold 

Here the biomass threshold is the fraction of pristine biomass $B_0$ which all species must reach to be considered as a viable option with $B_0$ being calculated as the biomass output of the surplus model with all metier effort set to 0.

## Economic threshold

The model's output concerns the Eastern part of the SESSH whereas costs parameters encompass the entire fished area (East and West). Costs based on effort such as variable costs are not affected since the effort used is only the eastern one. However fixed and capital costs are over-estimated if we look at the East only. Here we scale down these costs by comparing the model's gross value across all metier and species and the empirical value using the year 2018-2019 for reference.

Which is $31066740.22 / 48888090 = 0.6354664$

Therefore, in the calculations of the net operating surplus, fixed and capital costs are used at 63.5% of their value.

The economic threshold considers all effort combination of metier validating the biomass threshold and calculates the net operating surplus $NOS$ using the catch output produced by the model.

First the catch per metier $CMS$ is calculated such as 

$$CMS_{sp,m} = biomass_{sp} . q_{sp,m} . effort_{m} . effortScalar_m$$



$biomass_{sp}$ is the output of the production multispecies model. $effort_m$ is the effort per metier used in the production multispecies model (latest ABARES effort value) used conjointly with the $effortScalar_m$ to scale up or down the base effort to simulate different effort values per metier. Finally $q_{sp,m}$ is the catchability of each metier. 

$CMS$ is used to calculate the gross value per species $GVL_{sp}$

$$GVL_{sp,m} = CMS_{sp,m} . price_{sp}$$

The proportion allocated to the crew is then removed from a $GVL$ summed over species.

$$NVL_m = GVL_m . (1-cshr_m)$$

The $NVL$ is then used to calculate the return to be shared $rtbs$, shared between metier benefit and its costs

$$rtbs_m = NVL_m - cVARUE_m - cFREIGHT_m$$

with $cVARUE = shots_{day} . fuel_{shot} . no_{day} . no_{vessel} . effortScalar$

and $cFREIGHT = CMS . freight_{rate}$

Is then subtracted fixed and capital costs $cFix$ to obtain the gross operating surplus $GOS$

$$GOS_m = rtbs_m - cFix_m . noVessel_m$$

Finally the $NOS$ is obtained by removing the deprecation costs $cDep$ from $GOS$

$$NOS_m = GOS_m(1- cDep_m)$$

At the moment deprecation costs are not included in the app. Any effort combination yielding a $GOS$ over the economic threshold defined by the user will be stored and displayed in the plot.

## Social threshold

$cshr$ can be used to calculate the wages of the crew to determine if they are attractive enough. This is metier specific.

$$wage_{crew} = \frac{cshr * GVL}{no_{crew}*no_{vessel}}$$
All effort combination yielding wages over the social threshold will be stored and saved as they will have succeeded past the 3 threshold and be determined eco-viable.

# Rshiny app

```{r, eval = T, echo = F}

my_data <- data.frame("Description" = c("Number of vessels in fleet", 
                                        "Variable cost",
                                        "Freight cost ",
                                        "Average share of the crew",
                                        "Fixed and capital costs",
                                        "Deprecation cost",
                                        "Average number of crew member",
                                        "Average number of days at sea"),
                      "Unit" = c("unit",
                                 "per vessel per day in aud",
                                 "aud per kg",
                                 "proportion",
                                 "annual per vessel",
                                 "proportion",
                                 "per vessel",
                                 "annual per vessel"))



knitr::kable(my_data, caption = "Necessary inputs for the Rshiny app, all parameters have default values")

```

## Launching the app

The first block of this document contains the necessary files for the app, it needs to be run first.
The app can load objects from within, so one can select any RDS file containing a dataframe such as:

```{r}
object <- readRDS("res/currentEffort.rds")
knitr::kable(object[,1:7])
```


```{r}
shiny::runApp("app.R")
```

## app documentation

The main function of the app is to be able to pick the values for each threshold and apply to the current model output loaded in the app. The app can also run the model itself if one wishes to explore a new set of effort combinations. It also displays the details of cost and revenues per fleets and if they make the theshold.


# Model

## Test running the model

```{r}
# source("BareCode_MSPM_new/Tools.R")
# C.Fleet <-'BareCode_MSPM_new/data/Catch_Ratpack_metier.csv'
# External_catch <- 'BareCode_MSPM_new/data/East_Total_Extra_Catch.csv'

get(load("res/Output.RData"))
estimation.MSP <- output_NR$out

effortMatrix <- rep(1,14)
res <- simLoop(effortMatrix = effortMatrix, estimation.MSP = estimation.MSP, groups = groups, P.prey = P.prey, E.Fleet = E.Fleet)
```

## Test ecoviability

Data frame for all parameters, same as in the app, could link both.

```{r}
param_fleet<- data.frame("name" = c("DS","TW","GHK"),
                         "cVarUE" = c(112.64,1357.76,765.81),
                         "cFre" = c(0.207,0.175,0.043669),
                         "cShr" = c(0.402636533,0.229013145,0.428),
                         "fixed_cost" = c(85536,144128,114604.4),
                         "capital_cost" = c(305987,506098,331460.6),
                         "deprecation_cost" = c(0.02,0.03,0.06),
                         "noCrew" = c(3.5,4,2),
                         "noDay" = c(111,145,80)) %>% 
  mutate(cFix = 0.6354664 * fixed_cost + 0.079 *capital_cost) # only east approximation


param_metier <- param_fleet %>% 
  slice(rep(1,2),
        rep(2,3),
        rep(3,2),
        rep(2,4),
        rep(1,2),
        rep(2,1)) %>% 
  mutate(name = c( "FLTDanishSeiene102030", "FLTDanishSeiene60", "FLTTrawl10", 
                   "FLTTrawl2060", "FLTTrawl30", "HK_LIG", "Mixed", "MWOTrawl102060",
                   "MWOTrawl30", "TrawlLIG", "TrawlRED", "WHSDanishSeine20",
                   "WHSDanishSeine60", "WHSTrawl1020"),
         no_vessel = c(9.72,6.71,6.53,9.94,3.46,2,10,0.86,0.34,6.5,0.25,0.5,6.69,1.02),
         no_shot = c(4653,2118,820,2931,1214,214,5574,128,161,854,46,103,2278,218))


param_species <- data.frame("name" = c("FLT", "GRE", "LIG", "MOW", "RED", "SQD", "TRS", "TRT", "WHS"),
                            "price" = c(6.2,2.4,6.58,3.42,3.34,3.79,2.03,3.3,2.55))


```

Function similar to the app, calculating the ecoviability threshold. If the argument `threshold_df` is FALSE (default), the function returns a fitness value to be maximised by the algorithm looking for the best solutions. If `threshold_df` is TRUE, it returns the dataframe with the different values of biomass and money made.

```{r}
vary <- runif(14,.5,1.5)
ecoviability(vary = vary, qflt = qflt, currentF = currentF, estimation.MSP = estimation.MSP)
```

## Exploring the effort space

To look for the solution quickly, we can use parallel algorithms.
We have two choices, local optimisation algorithm running real fast in parallel but will easily get stuck if the the output of `ecoviability` is discrete. That's the situation now since many combination of effort can lead to the same number of species going extinct and metier going bankrupt as we judge their fitness on the basis of thresholds. This can me modified if instead of looking at threshold we look at maximizing the profit and the fish biomass but might lead to weird results where having one dominant species and one dominant fisheries is the best solution. Can be tweaked by editing `ecoviability` output. The second solution is to use genetic algorithm which cannot work in parallel as every next step depends on the previous one. However the solution is explored organically which each step informing on the where the solution could be. Can be made in parallel with parallel exploration with different starting point for example.

The following genetic algorithm is part of the latter and works well.

```{r}
library(GA)

vary <- runif(14,.5,1.5)
lowerB <- rep(.5,14)
upperB <- rep(1.5,14)

result <- ga(type = "real-valued", 
             fitness = ecoviability, qflt, currentF, estimation.MSP,
             lower = lowerB, upper = upperB,
             suggestions = vary, # starting point
             maxiter = 10, # maximum number of generations
             run = 5) # stops if fitness doesn't vary afte X generations

summary(result)
result@solution

ecoviability(result@solution[1,], qflt, currentF, estimation.MSP, threshold_df = T)
```


What is done

- function that runs the model for any combination of fleet effort (usually a multiplier of base effort from 2019)

- app reading an RDS object being a dataframe of effort combination and expected biomass caught

- from the dataframe the app calculate how many species will reach the biomass threshold (user input) and what effort combination yield a economic and social threshold (user input)

- the app will be slow if the dataframe is huge

- can run a simulation with user input effort from the app (overwrite any loaded object)

- algo looking for best solution without the app

TODO

- make equation being available to edit by user




### Discarded parallel code

```{r}
# Doing it in parallel with only 2 efforts

library(foreach)
library(doParallel)
source("simLoop.R")
get(load("res/Output.RData"))
estimation.MSP <- output_NR$out

groups <- 'BareCode_MSPM_new/data/Main_metier_Ratpack_clean_FishBase.csv'
P.prey <- 'BareCode_MSPM_new/data/Pprey_Ratpack_Atlantis.csv'
E.Fleet <- 'BareCode_MSPM_new/data/Effort_metier_Ratpack.csv'

global_effort <- c(.5,1)
effort_combinations <- as.matrix(expand.grid(replicate(14, global_effort, simplify = FALSE)))

num_cores <- detectCores() - 2
cl <- makeCluster(num_cores)
registerDoParallel(cl)

# Load the required package on each worker
clusterEvalQ(cl, library(RcppSimEffort))

# Export necessary objects to workers
clusterExport(cl, c("global_effort", "simLoop"))

# Parallel execution of simLoop
results <- foreach(row = 1:nrow(effort_combinations), .combine = rbind) %dopar% {
  effortMatrix <- effort_combinations[row, ]
  simLoop(
    effortMatrix = effortMatrix,
    estimation.MSP = estimation.MSP,
    groups = groups,
    P.prey = P.prey,
    E.Fleet = E.Fleet
  )
}

# Stop the parallel cluster
stopCluster(cl)

# adding pristine biomass
biom0 <- readRDS("res/biom0_2019.RDS")
results$biom0 <- rep(biom0, dim(effort_combinations)[1])
# adding unique ID to effort combinations
main      <- read.csv(groups)
results$effortID <- rep(1:dim(effort_combinations)[1], each = dim(main)[1])
# shortening names for QoL
colnames(results)[4:17] <- c("FLTDS102030","FLTDS60","FLTT10","FLTT2060","FLTT30",
                             "HK_LIG","Mixed","MWOT102060","MWOT30","TLIG",
                             "TRED","WHSDS20","WHSDS60","WHST1020")

saveRDS(results,"res/testRes.rds")



```









```{r}
library(parallel)
library(dplyr)
library(GA)
source("simLoop.R")
source("equations.R")

groups <- 'BareCode_MSPM_new/data/Main_metier_Ratpack_clean_FishBase.csv'
P.prey <- 'BareCode_MSPM_new/data/Pprey_Ratpack_Atlantis.csv'
E.Fleet <- 'BareCode_MSPM_new/data/Effort_metier_Ratpack.csv'

get(load("res/Output.RData"))
estimation.MSP <- output_NR$out
qflt   <- estimation.MSP$q
currentF <- as.numeric(read.csv(E.Fleet)[34,-1])
vary <- rep(.1,14)
vary <- runif(14,.5,1.5)
vary <- vary + vary*.1

#test
ecoviability(vary, qflt, currentF, estimation.MSP)

# Set the number of cores (adjust as needed)
num_cores <- detectCores() - 2

# Create a cluster
cl <- makeCluster(num_cores)
setDefaultCluster(cl = cl)

# Export necessary variables and functions to workers
clusterExport(
  cl,
  varlist = c("vary", "qflt", "currentF", "estimation.MSP", "ecoviability",
              "E.Fleet","P.prey","groups", "param_metier", "param_species", 
              "simLoop", "sim.eff","computeCMS","computeFRE","computeGVL","computeGOS","computeWage"),
  envir = environment()
)

# Load necessary libraries on workers
clusterEvalQ(
  cl, {
    libraries <- c("RcppSimEffort", "optimParallel", "dplyr")
    for (lib in libraries) {
      if (!requireNamespace(lib, quietly = TRUE)) {
        install.packages(lib, dependencies = TRUE)
      }
      library(lib, character.only = TRUE)
    }
  }
)

clusterEvalQ(cl, {
  print("Checking library loading on worker")
  libraries <- c("RcppSimEffort", "optimParallel", "dplyr")
  for (lib in libraries) {
    if (!requireNamespace(lib, quietly = TRUE)) {
      install.packages(lib, dependencies = TRUE)
    }
    library(lib, character.only = TRUE)
  }
})

clusterEvalQ(cl, {
  result <- 1 + 1
  print(result)
})

clusterEvalQ(cl, {
  library("optimParallel", character.only = TRUE)
})

clusterEvalQ(cl, {
  vary <- vary  # Replace NULL with actual values

})

clusterEvalQ(cl, {
  ls()
})

clusterEvalQ(cl, {
  library(RcppSimEffort)
  # library(optimParallel)
  library(GA)
  library(dplyr)
  library(tidyr)
})
# Parallel optimization using optimParallel
optim_result <- optimParallel::optimParallel(
  par = vary,
  fn = ecoviability,
  qflt = qflt,
  currentF = currentF,
  estimation.MSP = estimation.MSP,
  method = "DEoptim",
  # lower = rep(.1,14),
  # upper = rep(2,14),
  parallel = list(loginfo = TRUE, forward = TRUE, cl = cl)
)

# Stop the cluster when done
stopCluster(cl)
print(optim_result)


result <- ga(type = "real-valued", fitness = ecoviability, qflt, currentF, estimation.MSP,
             lower = rep(.9,14), upper = rep(1.1,14),
             maxiter = 5,
             parallel = cl)


```

algo? Actually if biom threshold is not met > return 0
If eco threshold is not met > return difference to positive as a negative number
otherwise return sums of revenue 
the algo looks for a maxima in this
